C51 COMPILER V9.60.0.0   I2C                                                               03/03/2021 14:26:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN ..\OBJ\I2C.obj
COMPILER INVOKED BY: F:\Program Files (x86)\MDK\C51\BIN\C51.EXE ..\SYSTEM\I2C.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\SYSTEM;..\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\Listings\I2C.lst) OBJECT(..\OBJ\I2C.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include        "I2C.h"
  14          
  15          u8      I2C_BUF_type I2C_RxBuffer[I2C_BUF_LENTH];
  16          
  17          //#define SLAW    0xA2
  18          //#define SLAR    0xA3
  19          #define SLAW    0x27<<1
  20          #define SLAR    0x28
  21          
  22          
  23          //========================================================================
  24          // 函数: void   I2C_Init(I2C_InitTypeDef *I2Cx)
  25          // 描述: I2C初始化程序.
  26          // 参数: I2Cx: 结构参数,请参考I2C.h里的定义.
  27          // 返回: none.
  28          // 版本: V1.0, 2012-11-22
  29          //========================================================================
  30          void    I2C_Init(I2C_InitTypeDef *I2Cx)
  31          {
  32   1              EAXSFR();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
  33   1              
  34   1              if(I2Cx->I2C_Mode == I2C_Mode_Master)
  35   1              {
  36   2                      I2C_Master();                   //设为主机      
  37   2                      I2CMSST = 0x00;         //清除I2C主机状态寄存器
  38   2                      I2C_Master_Inturrupt(I2Cx->I2C_MS_Interrupt);
  39   2                      I2C_SetSpeed(I2Cx->I2C_Speed);
  40   2                      if(I2Cx->I2C_MS_WDTA == ENABLE)         I2C_WDTA_EN();  //使能自动发送
  41   2                      else                                                                    I2C_WDTA_DIS(); //禁止自动发送
  42   2              }
  43   1              else
  44   1              {
  45   2                      I2C_Slave();    //设为从机
  46   2                      I2CSLST = 0x00;         //清除I2C从机状态寄存器 
  47   2                      if(I2Cx->I2C_SL_ESTAI == ENABLE)                I2C_ESTAI_EN(); //使能从机接收START信号中断
  48   2                      else                                                                    I2C_ESTAI_DIS();        //禁止从机接收START信号中断
  49   2                      if(I2Cx->I2C_SL_ERXI == ENABLE)         I2C_ERXI_EN();  //使能从机接收1字节数据中断
  50   2                      else                                                                    I2C_ERXI_DIS(); //禁止从机接收1字节数据中断
  51   2                      if(I2Cx->I2C_SL_ETXI == ENABLE)         I2C_ETXI_EN();  //使能从机发送1字节数据中断
  52   2                      else                                                                    I2C_ETXI_DIS(); //禁止从机发送1字节数据中断
  53   2                      if(I2Cx->I2C_SL_ESTOI == ENABLE)                I2C_ESTOI_EN(); //使能从机接收STOP信号中断
  54   2                      else                                                                    I2C_ESTOI_DIS();        //禁止从机接收STOP信号中断
C51 COMPILER V9.60.0.0   I2C                                                               03/03/2021 14:26:00 PAGE 2   

  55   2                      I2C_Address(I2Cx->I2C_SL_ADR);
  56   2                      if(I2Cx->I2C_SL_MA == ENABLE)           I2C_MATCH_EN(); //从机地址比较功能，只接受相匹配地址
  57   2                      else                                                                    I2C_MATCH_DIS();        //禁止从机地址比较功能，接受所有设备地址
  58   2              }
  59   1              
  60   1              P_SW2 = (P_SW2 & ~(3<<4)) | I2Cx->I2C_IoUse;
  61   1              I2C_Function(I2Cx->I2C_Enable);
  62   1      
  63   1              EAXRAM();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
  64   1      }
  65          
  66          //========================================================================
  67          // 函数: void   Wait (void)
  68          // 描述: 等待主机模式I2C控制器执行完成I2CMSCR.
  69          // 参数: mode: 指定模式, 取值 I2C_Mode_Master 或 I2C_Mode_Slave.
  70          // 返回: none.
  71          // 版本: V1.0, 2012-11-22
  72          //========================================================================
  73          void Wait()
  74          {
  75   1              while (!(I2CMSST & 0x40));
  76   1              I2CMSST &= ~0x40;
  77   1      }
  78          
  79          //========================================================================
  80          // 函数: void Start (void)
  81          // 描述: I2C总线起始函数.
  82          // 参数: none.
  83          // 返回: none.
  84          // 版本: V1.0, 2020-09-15
  85          //========================================================================
  86          void Start()
  87          {
  88   1              I2CMSCR = 0x01;                         //发送START命令
  89   1              Wait();
  90   1      }
  91          
  92          //========================================================================
  93          // 函数: void SendData (char dat)
  94          // 描述: I2C发送一个字节数据函数.
  95          // 参数: 发送的数据.
  96          // 返回: none.
  97          // 版本: V1.0, 2020-09-15
  98          //========================================================================
  99          void SendData(char dat)
 100          {
 101   1              I2CTXD = dat;                           //写数据到数据缓冲区
 102   1              I2CMSCR = 0x02;                         //发送SEND命令
 103   1              Wait();
 104   1      }
 105          
 106          //========================================================================
 107          // 函数: void RecvACK (void)
 108          // 描述: I2C获取ACK函数.
 109          // 参数: none.
 110          // 返回: none.
 111          // 版本: V1.0, 2020-09-15
 112          //========================================================================
 113          void RecvACK()
 114          {
 115   1              I2CMSCR = 0x03;                         //发送读ACK命令
 116   1              Wait();
C51 COMPILER V9.60.0.0   I2C                                                               03/03/2021 14:26:00 PAGE 3   

 117   1      }
 118          
 119          //========================================================================
 120          // 函数: char RecvData (void)
 121          // 描述: I2C读取一个字节数据函数.
 122          // 参数: none.
 123          // 返回: 读取数据.
 124          // 版本: V1.0, 2020-09-15
 125          //========================================================================
 126          char RecvData()
 127          {
 128   1              I2CMSCR = 0x04;                         //发送RECV命令
 129   1              Wait();
 130   1              return I2CRXD;
 131   1      }
 132          
 133          //========================================================================
 134          // 函数: void SendACK (void)
 135          // 描述: I2C发送ACK函数.
 136          // 参数: none.
 137          // 返回: none.
 138          // 版本: V1.0, 2020-09-15
 139          //========================================================================
 140          void SendACK()
 141          {
 142   1              I2CMSST = 0x00;                         //设置ACK信号
 143   1              I2CMSCR = 0x05;                         //发送ACK命令
 144   1              Wait();
 145   1      }
 146          
 147          //========================================================================
 148          // 函数: void SendNAK (void)
 149          // 描述: I2C发送NAK函数.
 150          // 参数: none.
 151          // 返回: none.
 152          // 版本: V1.0, 2020-09-15
 153          //========================================================================
 154          void SendNAK()
 155          {
 156   1              I2CMSST = 0x01;                         //设置NAK信号
 157   1              I2CMSCR = 0x05;                         //发送ACK命令
 158   1              Wait();
 159   1      }
 160          
 161          //========================================================================
 162          // 函数: void Stop (void)
 163          // 描述: I2C总线停止函数.
 164          // 参数: none.
 165          // 返回: none.
 166          // 版本: V1.0, 2020-09-15
 167          //========================================================================
 168          void Stop()
 169          {
 170   1              I2CMSCR = 0x06;                         //发送STOP命令
 171   1              Wait();
 172   1      }
 173          
 174          
 175          //========================================================================
 176          // 函数: void   Writebyte(u8 addr, u8 dat)
 177          // 描述: I2C写入数据函数.
 178          // 参数: addr: 指定地址, dat写入数据.
C51 COMPILER V9.60.0.0   I2C                                                               03/03/2021 14:26:00 PAGE 4   

 179          // 返回: none.
 180          // 版本: V1.0, 2020-09-15
 181          //========================================================================
 182          void Writebyte(u8 addr, u8 dat)  /*  Address,date   */
 183          {
 184   1              EAXSFR();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 185   1              Start();                                //发送起始命令
 186   1              SendData(addr);                         //发送设备地址+写命令
 187   1              RecvACK();
 188   1              SendData(dat);                                                  //发送数据
 189   1              RecvACK();
 190   1              Stop();                                 //发送停止命令
 191   1              EAXRAM();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 192   1      }
 193          
 194          //========================================================================
 195          // 函数: void   WriteNbyte(u8 addr, u8 *p, u8 number)
 196          // 描述: I2C写入数据函数.
 197          // 参数: addr: 指定地址, *p写入数据存储位置, number写入数据个数.
 198          // 返回: none.
 199          // 版本: V1.0, 2020-09-15
 200          //========================================================================
 201          void WriteNbyte(u8 addr, u8 *p, u8 number)  /*  WordAddress,First Data Address,Byte lenth   */
 202          {
 203   1              EAXSFR();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 204   1              Start();                                //发送起始命令
 205   1              SendData(SLAW);                         //发送设备地址+写命令
 206   1              RecvACK();
 207   1              SendData(addr);                         //发送存储地址
 208   1              RecvACK();
 209   1              do
 210   1              {
 211   2                      SendData(*p++);
 212   2                      RecvACK();
 213   2              }
 214   1              while(--number);
 215   1              Stop();                                 //发送停止命令
 216   1              EAXRAM();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 217   1      }
 218          
 219          //========================================================================
 220          // 函数: void   Readbyte(u8 addr)
 221          // 描述: I2C读取1字节数据函数.
 222          // 参数: addr: 指定地址.
 223          // 返回: dat.
 224          // 版本: V1.0, 2020-09-15
 225          //========================================================================
 226          u8 Readbyte(u8 addr)   /*  WordAddress,First Data Address,Byte lenth   */
 227          {
 228   1              u8 dat;
 229   1              EAXSFR();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 230   1              Start();                                //发送起始命令
 231   1              SendData(addr+1);                        //发送设备地址+读命令
 232   1              RecvACK();
 233   1              dat = RecvData();
 234   1              SendNAK();                              //send no ACK   
 235   1              Stop();                                 //发送停止命令
 236   1              EAXRAM();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 237   1              return dat;
 238   1      }
 239          
 240          //========================================================================
C51 COMPILER V9.60.0.0   I2C                                                               03/03/2021 14:26:00 PAGE 5   

 241          // 函数: void   ReadNbyte(u8 addr, u8 *p, u8 number)
 242          // 描述: I2C读取数据函数.
 243          // 参数: addr: 指定地址, *p读取数据存储位置, number读取数据个数.
 244          // 返回: none.
 245          // 版本: V1.0, 2020-09-15
 246          //========================================================================
 247          void ReadNbyte(u8 addr, u8 *p, u8 number)   /*  WordAddress,First Data Address,Byte lenth   */
 248          {
 249   1              EAXSFR();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 250   1              Start();                                //发送起始命令
 251   1              SendData(SLAW);                         //发送设备地址+写命令
 252   1              RecvACK();
 253   1              SendData(addr);                         //发送存储地址
 254   1              RecvACK();
 255   1              Start();                                //发送起始命令
 256   1              SendData(SLAR);                         //发送设备地址+读命令
 257   1              RecvACK();
 258   1              do
 259   1              {
 260   2                      *p = RecvData();
 261   2                      p++;
 262   2                      if(number != 1) SendACK();          //send ACK
 263   2              }
 264   1              while(--number);
 265   1              SendNAK();                              //send no ACK   
 266   1              Stop();                                 //发送停止命令
 267   1              EAXRAM();               /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 268   1      }
 269          
 270          //========================================================================
 271          // 函数: void I2C_Isr (void) interrupt I2C_VECTOR
 272          // 描述: I2C中断函数.
 273          // 参数: none.
 274          // 返回: none.
 275          // 版本: V1.0, 2020-09-15
 276          //========================================================================
 277          void I2C_Isr() interrupt I2C_VECTOR
 278          {
 279   1              char store;
 280   1              
 281   1              store = P_SW2;
 282   1              P_SW2 |= 0x80;
 283   1      
 284   1              //Add user code here.
 285   1      
 286   1              P_SW2 = store;
 287   1      }
 288          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    566    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
